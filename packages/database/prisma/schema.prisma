// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider   = "prisma-client-js"
  output     = "../.prisma/client"
  engineType = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model Node {
  nodeID          String           @id
  xcoord          Int
  ycoord          Int
  floor           String
  building        String
  nodeType        String
  longName        String
  shortName       String
  startEdges      Edge[]           @relation("StartNode")
  endEdges        Edge[]           @relation("EndNode")
  serviceRequests ServiceRequest[] @relation("Location")
}

model Edge {
  edgeID      String @id
  startNode   Node   @relation("StartNode", fields: [startNodeID], references: [nodeID], onDelete: Cascade)
  startNodeID String
  endNode     Node   @relation("EndNode", fields: [endNodeID], references: [nodeID], onDelete: Cascade)
  endNodeID   String
}

model ServiceRequest {
  serviceID         Int                       @id @default(autoincrement())
  timeCreated       DateTime                  @default(now())
  createdBy         Employee?                 @relation("Created", fields: [createdByID], references: [email], onDelete: SetNull)
  createdByID       String?
  location          Node                      @relation("Location", fields: [locationID], references: [nodeID], onDelete: Cascade)
  locationID        String
  priority          String
  status            String
  assignedTo        Employee?                 @relation("Assigned", fields: [assignedID], references: [email], onDelete: SetNull)
  assignedID        String?
  notes             String
  sanitation        SanitationRequest?
  maintenance       MaintenanceRequest?
  internalTransport InternalTransportRequest?
  medicine          MedicineRequest?
  language          LanguageRequest?
}

model SanitationRequest {
  serviceID      Int            @id
  serviceRequest ServiceRequest @relation(fields: [serviceID], references: [serviceID], onDelete: Cascade)
  hazards        String
}

model MaintenanceRequest {
  serviceID      Int            @id
  serviceRequest ServiceRequest @relation(fields: [serviceID], references: [serviceID], onDelete: Cascade)
  details        String
}

model InternalTransportRequest {
  serviceID      Int            @id
  serviceRequest ServiceRequest @relation(fields: [serviceID], references: [serviceID], onDelete: Cascade)
  toLocation     String
  mobilityAid    String
  patientName    String
}

model MedicineRequest {
  serviceID      Int            @id
  serviceRequest ServiceRequest @relation(fields: [serviceID], references: [serviceID], onDelete: Cascade)
  medicineType   String
  amount         String
}

model LanguageRequest {
  serviceID      Int            @id
  serviceRequest ServiceRequest @relation(fields: [serviceID], references: [serviceID], onDelete: Cascade)
  language1      String
  language2      String
  when           DateTime
}

model Employee {
  email            String           @id
  firstName        String?
  lastName         String?
  profilePicture   String?
  jobTitle         String?
  department       String?
  birthday         DateTime?
  phoneNumber      String?
  requestsCreated  ServiceRequest[] @relation("Created")
  requestsAssigned ServiceRequest[] @relation("Assigned")
}
